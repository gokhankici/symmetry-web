<div class="page-wrapper">
<section class="intro" id="zen-intro">
  <h1>Brisk: Sequentializing Distributed Programs</h1>
  <h2>Tutorial</h2>
<div class="preamble" id="zen-preamble" role="article">
  <h3>1. Symmetric Sequentialization</h3>
  Distributed programs are notoriously difficult to get
  right. Messages are sent asynchronously causing even small programs
  to have large numbers of possible execution. In this work, we make
  the following observations: programmers don't mentally case split over all possible
  executions. Instead, programmers tend to write programs that can be
  transformed into an equivalent, sequential program which we call the 
  symmetric sequentialization. We start off with a very simple example. <br>
  <br>
<div id="demo">
  <textarea id="ex1IL" class="input" >
  p: send  e_pid(m) p;
  p: recv val</textarea>
  <textarea id="ex1IR" class="input">
  m: recv id;
  m: send  e_var(id) p</textarea>
      <br> <br>
    <button class="button"
  onclick="simpleRequest('ex1IL','ex1IR','ex1O')">Sequentialize</button>
  <br><br>
  You can sequentialize the above program by cicking the
  "sequentialize" button.
  <br><br>
  <textarea id="ex1O" class="output">
  </textarea>
<h3>2. Loops and Sets of Processes</h3>
Next, we look at a more complicated program that contains a set of processes that run the same code.
<br><br>

<textarea  id="ex2IL" class="linput">for P in s do 
   m: send e_pid(P) m;
   m: recvFrom e_pid(P) val
end</textarea>
  <textarea id="ex2IR" class="linput">sym P in s do
   P: recv id;
   P: send e_var(id) P
end</textarea>
      <br> <br>
    <button class="button"
  onclick="simpleRequest('ex2IL','ex2IR','ex2O')">Sequentialize</button>
  <br><br>
    <textarea id="ex2O" class="output">
    </textarea>
</div>
</div>
</section>
</div>	</div>